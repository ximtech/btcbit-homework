plugins {
    id 'idea'
    id 'java'
    id 'groovy'
    id 'jacoco'
}

group 'net.btcbit.homework'
version '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

configurations {
    // configuration that holds jars to include in the jar
    includeLibrary
}

dependencies {
    implementation 'commons-io:commons-io:2.11.0'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'io.activej:activej-inject:5.5'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'   // log4j2 yaml configuration support

    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.slf4j:slf4j-api:2.0.13'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'
    
    compileOnly 'org.projectlombok:lombok:1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    // Testing, Spock, Groovy
    testImplementation "org.codehaus.groovy:groovy-all:3.0.20"
    testImplementation "org.spockframework:spock-core:2.3-groovy-3.0"
    testImplementation "net.bytebuddy:byte-buddy:1.9.3"
    configurations.implementation.extendsFrom(configurations.includeLibrary)
}

jar {
    enabled = true
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(
                'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
                'Main-Class': 'net.btcbit.homework.PianoTransposerApplication',
                'Multi-Release': 'true' 
        )
    }
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/exception/**',
            ])
        }))
    }
}

test {
    useJUnitPlatform()
    systemProperties System.properties
    classpath = sourceSets.test.runtimeClasspath

    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport
}

check.dependsOn jacocoTestCoverageVerification

tasks.withType(Test) {
    jvmArgs('--add-opens=java.base/java.lang=ALL-UNNAMED')
}